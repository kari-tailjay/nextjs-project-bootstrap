{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/dxfParser.ts"],"sourcesContent":["// DXF parsing utility to extract polygon boundaries, obstacles, and entry/exit points\n// This is a simplified parser using 'dxf-parser' npm package (to be installed in environment)\n\n// Since 'dxf-parser' is not installed and types are missing, we will create a mock parser function\n// that simulates parsing for demonstration purposes.\n\nexport interface ParsedDXFData {\n  polygons: Array<{ points: { x: number; y: number }[] }>;\n  obstacles: Array<{ points: { x: number; y: number }[] }>;\n  entryPoints: Array<{ x: number; y: number }>;\n}\n\nexport function parseDXF(_dxfText: string): ParsedDXFData {\n  // Mock implementation: returns empty arrays\n  return {\n    polygons: [],\n    obstacles: [],\n    entryPoints: [],\n  };\n}\n"],"names":[],"mappings":"AAAA,sFAAsF;AACtF,8FAA8F;AAE9F,mGAAmG;AACnG,qDAAqD;;;;AAQ9C,SAAS,SAAS,QAAgB;IACvC,4CAA4C;IAC5C,OAAO;QACL,UAAU,EAAE;QACZ,WAAW,EAAE;QACb,aAAa,EAAE;IACjB;AACF","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/layoutGenerator.ts"],"sourcesContent":["// Layout generation utility to create parking lot models based on input polygon, obstacles, and constraints\n// This is a simplified placeholder implementation\n\nimport { Point, Polygon } from \"./geometryUtils\";\n\nexport interface DesignConstraints {\n  slotWidth: number;\n  slotLength: number;\n  aisleWidth: number;\n  angles: number[]; // allowed angles in degrees\n  turningRadius: number;\n}\n\nexport interface ParkingSlot {\n  bottomLeft: Point;\n  width: number;\n  length: number;\n  angle: number;\n}\n\nexport interface ParkingLotModel {\n  slots: ParkingSlot[];\n  totalSlots: number;\n}\n\n/**\n * Generate multiple parking lot layout models based on constraints and lot polygon\n * @param lotPolygon Polygon defining the lot boundary\n * @param obstacles Array of obstacle polygons\n * @param constraints Design constraints\n * @returns Array of parking lot models\n */\nexport function generateParkingLotModels(\n  _lotPolygon: Polygon,\n  _obstacles: Polygon[],\n  _constraints: DesignConstraints\n): ParkingLotModel[] {\n  // Placeholder: generate one simple model with no slots\n  // Real implementation would generate multiple models maximizing slot count\n\n  return [\n    {\n      slots: [],\n      totalSlots: 0,\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA,4GAA4G;AAC5G,kDAAkD;;;;AA+B3C,SAAS,yBACd,WAAoB,EACpB,UAAqB,EACrB,YAA+B;IAE/B,uDAAuD;IACvD,2EAA2E;IAE3E,OAAO;QACL;YACE,OAAO,EAAE;YACT,YAAY;QACd;KACD;AACH","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/dxfExporter.ts"],"sourcesContent":["// Simple DXF export utility for parking lot layout rectangles\n\nimport { Point } from \"./geometryUtils\";\n\nexport interface Rectangle {\n  bottomLeft: Point;\n  width: number;\n  length: number;\n  angle: number; // rotation angle in degrees\n}\n\n/**\n * Generate DXF content for a list of rectangles representing parking slots\n * @param rectangles Array of rectangles\n * @returns DXF file content as string\n */\nexport function generateDXF(rectangles: Rectangle[]): string {\n  const header = `0\nSECTION\n2\nHEADER\n0\nENDSEC\n0\nSECTION\n2\nTABLES\n0\nENDSEC\n0\nSECTION\n2\nBLOCKS\n0\nENDSEC\n0\nSECTION\n2\nENTITIES\n`;\n\n  const footer = `0\nENDSEC\n0\nEOF\n`;\n\n  let entities = \"\";\n\n  rectangles.forEach((rect) => {\n    // Calculate the four corners of the rectangle with rotation\n    const rad = (rect.angle * Math.PI) / 180;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    const bl = rect.bottomLeft;\n    const br = {\n      x: bl.x + rect.width * cos,\n      y: bl.y + rect.width * sin,\n    };\n    const tr = {\n      x: br.x - rect.length * sin,\n      y: br.y + rect.length * cos,\n    };\n    const tl = {\n      x: bl.x - rect.length * sin,\n      y: bl.y + rect.length * cos,\n    };\n\n    // DXF POLYLINE for rectangle\n    entities += `0\nPOLYLINE\n8\nParkingSlots\n66\n1\n70\n1\n0\nVERTEX\n8\nParkingSlots\n10\n${bl.x.toFixed(3)}\n20\n${bl.y.toFixed(3)}\n30\n0.0\n0\nVERTEX\n8\nParkingSlots\n10\n${br.x.toFixed(3)}\n20\n${br.y.toFixed(3)}\n30\n0.0\n0\nVERTEX\n8\nParkingSlots\n10\n${tr.x.toFixed(3)}\n20\n${tr.y.toFixed(3)}\n30\n0.0\n0\nVERTEX\n8\nParkingSlots\n10\n${tl.x.toFixed(3)}\n20\n${tl.y.toFixed(3)}\n30\n0.0\n0\nSEQEND\n`;\n  });\n\n  return header + entities + footer;\n}\n"],"names":[],"mappings":"AAAA,8DAA8D;;;;AAgBvD,SAAS,YAAY,UAAuB;IACjD,MAAM,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBlB,CAAC;IAEC,MAAM,SAAS,CAAC;;;;AAIlB,CAAC;IAEC,IAAI,WAAW;IAEf,WAAW,OAAO,CAAC,CAAC;QAClB,4DAA4D;QAC5D,MAAM,MAAM,AAAC,KAAK,KAAK,GAAG,KAAK,EAAE,GAAI;QACrC,MAAM,MAAM,KAAK,GAAG,CAAC;QACrB,MAAM,MAAM,KAAK,GAAG,CAAC;QAErB,MAAM,KAAK,KAAK,UAAU;QAC1B,MAAM,KAAK;YACT,GAAG,GAAG,CAAC,GAAG,KAAK,KAAK,GAAG;YACvB,GAAG,GAAG,CAAC,GAAG,KAAK,KAAK,GAAG;QACzB;QACA,MAAM,KAAK;YACT,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,GAAG;YACxB,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,GAAG;QAC1B;QACA,MAAM,KAAK;YACT,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,GAAG;YACxB,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,GAAG;QAC1B;QAEA,6BAA6B;QAC7B,YAAY,CAAC;;;;;;;;;;;;;AAajB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;AAElB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;;;;;;;AAQlB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;AAElB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;;;;;;;AAQlB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;AAElB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;;;;;;;AAQlB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;AAElB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG;;;;;AAKlB,CAAC;IACC;IAEA,OAAO,SAAS,WAAW;AAC7B","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ParkingLotDesigner.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from \"react\";\nimport { parseDXF, ParsedDXFData } from \"@/lib/dxfParser\";\nimport { generateParkingLotModels, ParkingLotModel, DesignConstraints } from \"@/lib/layoutGenerator\";\nimport { generateDXF } from \"@/lib/dxfExporter\";\n\nconst defaultConstraints: DesignConstraints = {\n  slotWidth: 2.5,\n  slotLength: 5,\n  aisleWidth: 6,\n  angles: [90, 60, 45],\n  turningRadius: 6,\n};\n\nconst ParkingLotDesigner: React.FC = () => {\n  const [parsedData, setParsedData] = useState<ParsedDXFData | null>(null);\n  const [constraints, setConstraints] = useState<DesignConstraints>(defaultConstraints);\n  const [models, setModels] = useState<ParkingLotModel[]>([]);\n  const [selectedModelIndex, setSelectedModelIndex] = useState<number | null>(null);\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0] || null;\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result;\n        if (typeof text === \"string\") {\n          try {\n            const data = parseDXF(text);\n            setParsedData(data);\n            setModels([]);\n            setSelectedModelIndex(null);\n          } catch {\n            alert(\"Failed to parse DXF file.\");\n          }\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const generateLayout = () => {\n    if (!parsedData || parsedData.polygons.length === 0) {\n      alert(\"Please upload a valid DXF file with lot boundary.\");\n      return;\n    }\n    const lotPolygon = { points: parsedData.polygons[0].points };\n    const obstacles = parsedData.obstacles.map((o) => ({ points: o.points }));\n    const generatedModels = generateParkingLotModels(lotPolygon, obstacles, constraints);\n    setModels(generatedModels);\n    setSelectedModelIndex(0);\n  };\n\n  const exportSelectedModelDXF = () => {\n    if (selectedModelIndex === null) {\n      alert(\"No model selected for export.\");\n      return;\n    }\n    const model = models[selectedModelIndex];\n    const dxfContent = generateDXF(model.slots);\n    const blob = new Blob([dxfContent], { type: \"application/dxf\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"parking_lot_layout.dxf\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const containerStyle = {\n    maxWidth: \"768px\",\n    margin: \"0 auto\",\n    padding: \"40px 20px\"\n  };\n\n  const h1Style = {\n    fontSize: \"2rem\",\n    fontWeight: \"600\",\n    marginBottom: \"24px\",\n    textAlign: \"center\" as const\n  };\n\n  const h2Style = {\n    fontSize: \"1.25rem\",\n    fontWeight: \"600\",\n    marginBottom: \"12px\"\n  };\n\n  const sectionStyle = {\n    marginBottom: \"40px\"\n  };\n\n  const labelStyle = {\n    display: \"block\",\n    fontWeight: \"500\",\n    marginBottom: \"4px\"\n  };\n\n  const inputStyle = {\n    width: \"100%\",\n    padding: \"8px 12px\",\n    border: \"1px solid #d1d5db\",\n    borderRadius: \"6px\",\n    fontSize: \"14px\",\n    marginBottom: \"16px\"\n  };\n\n  const buttonStyle = {\n    backgroundColor: \"#111827\",\n    color: \"#ffffff\",\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"6px\",\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    marginRight: \"8px\"\n  };\n\n  const buttonSecondaryStyle = {\n    backgroundColor: \"#ffffff\",\n    color: \"#111827\",\n    padding: \"8px 16px\",\n    border: \"1px solid #d1d5db\",\n    borderRadius: \"6px\",\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    marginBottom: \"8px\",\n    marginRight: \"8px\"\n  };\n\n  const buttonSelectedStyle = {\n    ...buttonSecondaryStyle,\n    backgroundColor: \"#111827\",\n    color: \"#ffffff\"\n  };\n\n  return (\n    <div style={containerStyle}>\n      <section style={sectionStyle}>\n        <h2 style={h2Style}>Upload AutoCAD DXF/DWG File</h2>\n        <input \n          type=\"file\" \n          accept=\".dxf,.dwg\" \n          onChange={handleFileUpload} \n          style={inputStyle}\n        />\n        {parsedData && (\n          <div style={{ marginBottom: \"16px\", padding: \"12px\", backgroundColor: \"#f9fafb\", borderRadius: \"6px\" }}>\n            <p style={{ margin: 0, fontSize: \"14px\" }}>\n              Parsed {parsedData.polygons.length} lot boundary polygon(s), {parsedData.obstacles.length} obstacle(s), and {parsedData.entryPoints.length} entry/exit point(s).\n            </p>\n          </div>\n        )}\n      </section>\n\n      <section style={sectionStyle}>\n        <h2 style={h2Style}>Design Constraints</h2>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            generateLayout();\n          }}\n        >\n          <div>\n            <label style={labelStyle}>Slot Width (m)</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              min=\"1\"\n              value={constraints.slotWidth}\n              onChange={(e) =>\n                setConstraints({ ...constraints, slotWidth: parseFloat(e.target.value) })\n              }\n              style={inputStyle}\n              required\n            />\n          </div>\n          <div>\n            <label style={labelStyle}>Slot Length (m)</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              min=\"1\"\n              value={constraints.slotLength}\n              onChange={(e) =>\n                setConstraints({ ...constraints, slotLength: parseFloat(e.target.value) })\n              }\n              style={inputStyle}\n              required\n            />\n          </div>\n          <div>\n            <label style={labelStyle}>Aisle Width (m)</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              min=\"1\"\n              value={constraints.aisleWidth}\n              onChange={(e) =>\n                setConstraints({ ...constraints, aisleWidth: parseFloat(e.target.value) })\n              }\n              style={inputStyle}\n              required\n            />\n          </div>\n          <div>\n            <label style={labelStyle}>Allowed Angles (degrees, comma separated)</label>\n            <input\n              type=\"text\"\n              value={constraints.angles.join(\", \")}\n              onChange={(e) => {\n                const angles = e.target.value\n                  .split(\",\")\n                  .map((a) => parseInt(a.trim()))\n                  .filter((a) => !isNaN(a));\n                setConstraints({ ...constraints, angles });\n              }}\n              style={inputStyle}\n              required\n            />\n          </div>\n          <div>\n            <label style={labelStyle}>Turning Radius (m)</label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              min=\"1\"\n              value={constraints.turningRadius}\n              onChange={(e) =>\n                setConstraints({ ...constraints, turningRadius: parseFloat(e.target.value) })\n              }\n              style={inputStyle}\n              required\n            />\n          </div>\n          <button type=\"submit\" style={buttonStyle}>\n            Generate Layout\n          </button>\n        </form>\n      </section>\n\n      {models.length > 0 && (\n        <section style={sectionStyle}>\n          <h2 style={h2Style}>Generated Parking Lot Models</h2>\n          <div style={{ marginBottom: \"16px\" }}>\n            {models.map((model, index) => (\n              <button\n                key={index}\n                style={selectedModelIndex === index ? buttonSelectedStyle : buttonSecondaryStyle}\n                onClick={() => setSelectedModelIndex(index)}\n              >\n                Model {index + 1} - Slots: {model.totalSlots}\n              </button>\n            ))}\n          </div>\n          {selectedModelIndex !== null && (\n            <div>\n              <button onClick={exportSelectedModelDXF} style={buttonStyle}>\n                Export Selected Model as DXF\n              </button>\n            </div>\n          )}\n        </section>\n      )}\n    </div>\n  );\n};\n\nexport default ParkingLotDesigner;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}}]
}